// Generated by CoffeeScript 1.9.1
var Future, Optimizer, ProjectBuilder, ServerProcessManager, _, cliParser, handleChdir, normalizeBuildOptions, normalizeServerOptions, rmrf;

_ = require('underscore');

Future = require('./utils/Future');

rmrf = require('./utils/rmrf');

cliParser = require('./cli-parser');

Optimizer = require('./optimizer/Optimizer');

ProjectBuilder = require('./build/ProjectBuilder');

ServerProcessManager = require('./server/ServerProcessManager');

exports.main = function() {

  /*
  Main cordjs CLI tool entry point.
   */
  var commands;
  commands = {
    build: function(options) {

      /*
      Builds whole project.
       */
      var buildOptions, cleanFuture;
      handleChdir(options);
      buildOptions = normalizeBuildOptions(options);
      buildOptions.config = options.config;
      cleanFuture = buildOptions.clean ? commands.clean(options) : Future.resolved();
      return cleanFuture.failAloud().then(function() {
        var builder;
        builder = new ProjectBuilder(buildOptions);
        builder.build().fail(function() {
          if (!buildOptions.watch) {
            return process.exit(1);
          }
        });
        return [builder, buildOptions];
      });
    },
    run: function(options) {

      /*
      Builds project and starts cordjs server
       */
      return commands.build(options).failAloud().done(function(builder, buildOptions) {
        var serverOptions, serverProcessManager;
        serverOptions = normalizeServerOptions(options);
        serverProcessManager = new ServerProcessManager(_.extend(buildOptions, serverOptions));
        return builder.on('complete', function() {
          console.log('Restarting...');
          console.log('---------------------');
          return serverProcessManager.restart();
        });
      });
    },
    optimize: function(options) {
      var optimizer;
      handleChdir(options);
      optimizer = new Optimizer({
        targetDir: (process.cwd()) + "/" + options.out,
        clean: options.clean,
        css: !options.disableCss,
        cssMinify: !options.disableCssMinify,
        js: !options.disableJs,
        jsMinify: !options.disableJsMinify
      });
      return optimizer.run();
    },
    clean: function(options) {
      console.log("Cleaning project...");
      handleChdir(options);
      return rmrf(normalizeBuildOptions(options).targetDir);
    }
  };
  return cliParser.run(commands);
};

handleChdir = function(options) {
  if (options.parent.chdir) {
    return process.chdir(options.parent.chdir);
  }
};

normalizeBuildOptions = function(options) {
  var curDir;
  curDir = process.cwd().replace(/\\/g, '/');
  return {
    baseDir: curDir,
    targetDir: curDir + "/" + (options.out ? options.out : 'target'),
    watch: !!options.watch,
    clean: !!options.clean,
    map: !!options.map,
    appConfigName: "" + (options.app ? options.app : 'application'),
    indexPageWidget: options.index
  };
};

normalizeServerOptions = function(options) {
  return {
    config: options.config,
    port: parseInt(options.port),
    map: !!options.map
  };
};
