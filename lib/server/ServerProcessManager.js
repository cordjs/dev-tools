// Generated by CoffeeScript 1.8.0
var ServerProcessManager, path, spawn, util;

spawn = require('child_process').spawn;

path = require('path');

util = require('util');

ServerProcessManager = (function() {

  /*
  Manages cordjs development web-server process starting/stopping/restarting
   */
  ServerProcessManager.prototype._process = null;

  ServerProcessManager.prototype._errorCounter = 0;

  ServerProcessManager.prototype._resetErrorCounterTimeout = null;

  function ServerProcessManager(params) {
    this.params = params;
  }

  ServerProcessManager.prototype.start = function() {
    var arg, currentPort, serverProcessArgs, serverProcessParams, _i, _len, _ref;
    if (!this._process) {
      serverProcessArgs = [];
      _ref = process.execArgv;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        arg = _ref[_i];
        if (0 === arg.indexOf('--debug-brk=')) {
          currentPort = parseInt(arg.substring('--debug-brk='.length));
          if (null !== currentPort) {
            serverProcessArgs.push("--debug-brk=" + (currentPort + 1));
          }
        }
      }
      serverProcessArgs = serverProcessArgs.concat([path.join(this.params.targetDir, 'server.js'), path.join(this.params.targetDir, 'public'), this.params.config, this.params.port]);
      serverProcessParams = {
        cwd: this.params.targetDir,
        env: {}
      };
      if (this.params.map) {
        serverProcessParams.env.DEV_SOURCES_SERVER_ROOT_DIR = this.params.baseDir;
      }
      util.log("node " + (serverProcessArgs.join(' ')));
      this._process = spawn('node', serverProcessArgs, serverProcessParams);
      this._process.stdout.on('data', function(x) {
        return process.stdout.write(x);
      });
      this._process.stderr.on('data', function(x) {
        return process.stderr.write(x);
      });
      this._process.on('exit', (function(_this) {
        return function(code) {
          if (_this._errorCounter > 1) {
            return util.log("Too many restart errors. Stopping to try. Error code '" + code + "'");
          } else {
            _this._errorCounter++;
            return _this.restart();
          }
        };
      })(this));
      if (this._resetErrorCounterTimeout != null) {
        clearTimeout(this._resetErrorCounterTimeout);
      }
      return this._resetErrorCounterTimeout = setTimeout((function(_this) {
        return function() {
          return _this._errorCounter = 0;
        };
      })(this), 1000);
    } else {
      return console.warn("Server process is already started!");
    }
  };

  ServerProcessManager.prototype.stop = function() {
    if (this._process) {
      this._process.removeAllListeners('exit');
      this._process.kill();
      return this._process = null;
    }
  };

  ServerProcessManager.prototype.restart = function() {
    this.stop();
    return this.start();
  };

  return ServerProcessManager;

})();

module.exports = ServerProcessManager;
