// Generated by CoffeeScript 1.7.1
var CorrelationGroupDetector, sha1, _;

_ = require('underscore');

sha1 = require('../utils/sha1');

CorrelationGroupDetector = (function() {

  /*
  Optimizer that finds out groups of modules which are always used together (100% correlation)
   */
  function CorrelationGroupDetector(groupRepo) {
    this.groupRepo = groupRepo;
  }

  CorrelationGroupDetector.prototype.process = function(stat) {
    var checksum, checksums, filteredGroups, groupId, groupModules, module, moduleList, modules, optimizedStat, page, pages, _ref;
    checksums = {};
    _ref = this._mapStat(stat);
    for (module in _ref) {
      pages = _ref[module];
      checksum = this._calculatePagesChecksum(pages);
      if (checksums[checksum] == null) {
        checksums[checksum] = [];
      }
      checksums[checksum].push(module);
    }
    filteredGroups = {};
    for (groupId in checksums) {
      modules = checksums[groupId];
      if (!(modules.length > 1)) {
        continue;
      }
      this.groupRepo.createGroup(groupId, modules);
      filteredGroups[groupId] = modules;
    }
    optimizedStat = {};
    for (page in stat) {
      moduleList = stat[page];
      modules = _.clone(moduleList);
      for (checksum in filteredGroups) {
        groupModules = filteredGroups[checksum];
        if (modules.indexOf(groupModules[0]) > -1) {
          modules = _.difference(modules, groupModules);
          if (groupModules.length < 20) {
            modules.push(checksum);
          }
        }
      }
      optimizedStat[page] = modules;
    }
    return optimizedStat;
  };

  CorrelationGroupDetector.prototype._calculatePagesChecksum = function(pages) {

    /*
    Returns unique id based on list of pages in which the module is used.
    @param Array[String] pages list of pages root widgets names
    @return String
     */
    var pagesStr;
    pagesStr = pages.sort().join();
    return 'group-correlation-' + sha1(pagesStr) + '-' + pages.length + '-' + pagesStr.substr(-10);
  };

  CorrelationGroupDetector.prototype._mapStat = function(stat) {
    var module, moduleList, page, result, _i, _len;
    result = {};
    for (page in stat) {
      moduleList = stat[page];
      for (_i = 0, _len = moduleList.length; _i < _len; _i++) {
        module = moduleList[_i];
        if (module.indexOf('/bundles/cord/core/init/browser-init.js') === -1) {
          if (result[module] == null) {
            result[module] = [];
          }
          result[module].push(page);
        }
      }
    }
    return result;
  };

  return CorrelationGroupDetector;

})();

module.exports = CorrelationGroupDetector;
