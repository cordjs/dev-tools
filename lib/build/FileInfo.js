// Generated by CoffeeScript 1.7.1
var FileInfo, path, testObjectPathRegExp, testSpecPathRegExp;

path = require('path');

testSpecPathRegExp = new RegExp('test/.*/specs/.*\\.coffee$');

testObjectPathRegExp = new RegExp('test/.*/(page-objects|helpers)/.*\\.coffee$');

FileInfo = (function() {
  function FileInfo() {}


  /*
  @static
   */

  FileInfo.baseDir = null;

  FileInfo.targetDir = null;

  FileInfo.bundleTree = {};

  FileInfo.setDirs = function(base, target) {
    this.baseDir = base;
    return this.targetDir = target;
  };

  FileInfo.setBundles = function(bundles) {

    /*
    Registers bundle list from the application configuration to be able to detect bundle by the given file path
    @param Array[String] bundles
     */
    var bundle, curLevel, i, last, part, parts, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = bundles.length; _i < _len; _i++) {
      bundle = bundles[_i];
      parts = bundle.split('/');
      last = parts.length - 1;
      curLevel = this.bundleTree;
      _results.push((function() {
        var _j, _len1, _results1;
        _results1 = [];
        for (i = _j = 0, _len1 = parts.length; _j < _len1; i = ++_j) {
          part = parts[i];
          if (curLevel[part] == null) {
            curLevel[part] = i === last ? true : {};
          }
          _results1.push(curLevel = curLevel[part]);
        }
        return _results1;
      })());
    }
    return _results;
  };

  FileInfo.getTargetForSource = function(srcAbsPath) {

    /*
    Returns absolute target file path for the given absolute source file path.
    @param String srcAbsPath
    @return String
     */
    var info, relativePath;
    relativePath = srcAbsPath.substr(this.baseDir.length + 1);
    info = this.getFileInfo(relativePath, this.detectBundle(relativePath));
    return path.join(this.targetDir, this.getBuildDestinationFile(relativePath, info));
  };

  FileInfo.detectBundle = function(file) {

    /*
    Returns bundle name for the given relative file path.
    @param String file relative (to the base dir) file path
    @return String
     */
    var bundles, curLevel, ns, parts, result, _i, _len;
    parts = file.split('/');
    bundles = parts.shift();
    bundles = parts.shift();
    if (bundles === 'bundles') {
      curLevel = this.bundleTree;
      result = [];
      for (_i = 0, _len = parts.length; _i < _len; _i++) {
        ns = parts[_i];
        if (curLevel[ns] != null) {
          result.push(ns);
          if (curLevel[ns] === true) {
            break;
          } else {
            curLevel = curLevel[ns];
          }
        } else {
          result = [];
          break;
        }
      }
      return result.join('/');
    } else {
      return '';
    }
  };

  FileInfo.getFileInfo = function(file, bundle) {

    /*
    Returns a lot of file properties from the framework's point of view
    @param String file path to file
    @param (optional)String bundle bundle to which this file belongs
    @return Object key-value with file properties
     */
    var bundleOk, bundleParts, ext, fileName, fileWithoutExt, i, inApp, inBundleIndex, inBundles, inModels, inPublic, inTemplates, inWidgets, isBehaviour, isCollection, isModelRepo, isWidget, isWidgetTemplate, lastDirName, lowerName, p, parts, _i, _len;
    parts = file.split('/');
    inPublic = parts[0] === 'public';
    fileName = parts.pop();
    lastDirName = parts[parts.length - 1];
    ext = path.extname(fileName);
    fileWithoutExt = fileName.slice(0, -ext.length);
    if (inPublic) {
      inBundles = parts[1] === 'bundles';
      if (inBundles) {
        bundleParts = bundle.split('/');
        bundleOk = true;
        for (i = _i = 0, _len = bundleParts.length; _i < _len; i = ++_i) {
          p = bundleParts[i];
          if (p !== parts[2 + i]) {
            bundleOk = false;
            break;
          }
        }
        if (bundleOk) {
          inBundleIndex = 2 + bundleParts.length;
          inWidgets = parts[inBundleIndex] === 'widgets';
          inTemplates = parts[inBundleIndex] === 'templates';
          inModels = parts[inBundleIndex] === 'models';
          if (inWidgets) {
            if (ext === '.coffee') {
              lowerName = fileWithoutExt.charAt(0).toLowerCase() + fileWithoutExt.slice(1);
              isWidget = lastDirName === lowerName;
              isBehaviour = (lastDirName + 'Behaviour') === lowerName;
            } else if (ext === '.html') {
              isWidgetTemplate = true;
            }
          } else if (inModels) {
            isModelRepo = ext === '.coffee' && fileWithoutExt.substr(-4) === 'Repo';
            isCollection = ext === '.coffee' && fileWithoutExt.substr(-10) === 'Collection';
          }
        }
      } else {
        bundle = null;
        inApp = parts[1] === 'app';
      }
    }
    return {
      fileName: fileName,
      ext: ext,
      fileNameWithoutExt: fileWithoutExt,
      lastDirName: lastDirName,
      bundle: bundle,
      inPublic: inPublic,
      inBundles: inBundles != null ? inBundles : false,
      inWidgets: inWidgets != null ? inWidgets : false,
      inTemplates: inTemplates != null ? inTemplates : false,
      inModels: inModels != null ? inModels : false,
      isAppConfig: inApp && lastDirName === 'app' && ext === '.coffee',
      isWidget: isWidget != null ? isWidget : false,
      isBehaviour: isBehaviour != null ? isBehaviour : false,
      isWidgetTemplate: isWidgetTemplate != null ? isWidgetTemplate : false,
      isModelRepo: isModelRepo != null ? isModelRepo : false,
      isCollection: isCollection != null ? isCollection : false,
      isCoffee: ext === '.coffee',
      isHtml: ext === '.html',
      isStylus: ext === '.styl',
      isTestSpec: file.match(testSpecPathRegExp) != null,
      isTestObject: file.match(testObjectPathRegExp) != null
    };
  };

  FileInfo.getBuildDestinationFile = function(file, info) {

    /*
    Returns destination file relative name based on source file and framework-related information
    @param String file relative file name
    @param Object info framework-related information about the file
    @return String
     */
    if (info.isCoffee) {
      return path.dirname(file) + path.sep + info.fileNameWithoutExt + '.js';
    } else if (info.isStylus) {
      return path.dirname(file) + path.sep + info.fileNameWithoutExt + '.css';
    } else if (info.isWidgetTemplate) {
      return file + '.js';
    } else {
      return file;
    }
  };

  return FileInfo;

})();

module.exports = FileInfo;
