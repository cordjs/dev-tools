// Generated by CoffeeScript 1.7.1
var CompileCoffeeScript, CompileTestSpec, coffee, defineContextString, defineContextStringInItBlock,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

CompileCoffeeScript = require('./CompileCoffeeScript');

coffee = require('coffee-script');

defineContextString = "stof.defineContext(__filename, false)\n";

defineContextStringInItBlock = "stof.defineContext(__filename)\n";

CompileTestSpec = (function(_super) {
  __extends(CompileTestSpec, _super);

  function CompileTestSpec() {
    return CompileTestSpec.__super__.constructor.apply(this, arguments);
  }

  CompileTestSpec.prototype.preCompilerCallback = function(coffeeString) {
    var elem, inIt, indent, key, line, lineStartPos, linesToPaste, token, tokens;
    tokens = coffee.tokens(coffeeString);
    inIt = false;
    linesToPaste = [];
    for (key in tokens) {
      token = tokens[key];
      if (!inIt && token[0] === 'IDENTIFIER' && token[1] === 'it') {
        inIt = true;
      } else if (inIt && token[0] === 'INDENT') {
        inIt = false;
        linesToPaste.push({
          line: token[2].first_line,
          indent: token[2].last_column + 1
        });
      }
    }
    linesToPaste = linesToPaste.reverse();
    for (key in linesToPaste) {
      elem = linesToPaste[key];
      line = elem.line, indent = elem.indent;
      lineStartPos = this._lineStartPos(coffeeString, line);
      coffeeString = coffeeString.substr(0, lineStartPos) + "\n" + this._pad('', indent) + defineContextStringInItBlock + coffeeString.substr(lineStartPos);
    }
    return defineContextString + coffeeString;
  };

  CompileTestSpec.prototype._pad = function(str, width) {
    var len;
    len = Math.max(0, width - str.length);
    return str + Array(len + 1).join(' ');
  };

  CompileTestSpec.prototype._lineStartPos = function(string, line) {
    var i, lineStartPos;
    lineStartPos = 0;
    i = 0;
    while (i < line) {
      lineStartPos = string.indexOf("\n", lineStartPos) + 1;
      i++;
    }
    return lineStartPos;
  };

  return CompileTestSpec;

})(CompileCoffeeScript);

module.exports = CompileTestSpec;
