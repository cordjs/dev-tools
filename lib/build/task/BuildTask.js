// Generated by CoffeeScript 1.9.1
(function() {
  var BuildTask, ExpectedError, Future, path,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  path = require('path');

  Future = require('../../utils/Future');

  ExpectedError = (function(superClass) {
    extend(ExpectedError, superClass);

    ExpectedError.prototype.name = 'ExpectedError';

    function ExpectedError(underlyingError1) {
      this.underlyingError = underlyingError1;
      this.underlyingError = underlyingError;
      ExpectedError.__super__.constructor.call(this, this.underlyingError.message, this.underlyingError.id);
    }

    return ExpectedError;

  })(Error);

  BuildTask = (function() {

    /*
    Base class for all build tasks.
    @abstract
     */
    BuildTask.ExpectedError = ExpectedError;

    BuildTask.prototype.readyPromise = null;

    function BuildTask(params) {
      this.params = params;
      this.readyPromise = Future.single();
    }

    BuildTask.prototype.run = function() {

      /*
      Actual task executor.
      Should be implemented in concrete task class.
      readyPromise must be completed here.
       */
      throw new Error('BuildTask.run() method must be overriden by concrete task!');
    };

    BuildTask.prototype.ready = function() {
      return this.readyPromise;
    };

    return BuildTask;

  })();

  module.exports = BuildTask;

}).call(this);
