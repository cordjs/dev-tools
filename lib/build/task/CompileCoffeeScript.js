// Generated by CoffeeScript 1.8.0
var BuildTask, CompileCoffeeScript, Future, coffee, fs, mkdirp, path,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

fs = require('fs');

path = require('path');

coffee = require('coffee-script');

mkdirp = require('mkdirp');

Future = require('../../utils/Future');

BuildTask = require('./BuildTask');

CompileCoffeeScript = (function(_super) {
  __extends(CompileCoffeeScript, _super);

  function CompileCoffeeScript() {
    return CompileCoffeeScript.__super__.constructor.apply(this, arguments);
  }

  CompileCoffeeScript.prototype.preCompilerCallback = null;

  CompileCoffeeScript.prototype.postCompilerCallback = null;

  CompileCoffeeScript.prototype.run = function() {
    var basename, dirname, dstBasename, dstName, src;
    dirname = path.dirname(this.params.file);
    basename = path.basename(this.params.file, '.coffee');
    dstName = this.params.info.isAppConfig ? 'application' : basename;
    src = "" + this.params.baseDir + "/" + this.params.file;
    dstBasename = "" + this.params.targetDir + "/" + dirname + "/" + dstName;
    return Future.call(fs.readFile, src, 'utf8').map((function(_this) {
      return function(coffeeString) {
        var answer, inf, js, name;
        if (_this.preCompilerCallback) {
          coffeeString = _this.preCompilerCallback(coffeeString);
        }
        answer = coffee.compile(coffeeString, {
          filename: src,
          literate: false,
          header: true,
          compile: true,
          bare: true,
          sourceMap: _this.params.generateSourceMap,
          jsPath: "" + dstBasename + ".js",
          sourceRoot: './',
          sourceFiles: [basename + '.coffee'],
          generatedFile: basename + '.js'
        });
        if (!_this.params.generateSourceMap) {
          js = answer;
          answer = {};
          answer.js = js;
          answer.v3SourceMap = void 0;
        }
        answer.coffeeString = coffeeString;
        inf = _this.params.info;
        if (inf.isWidget || inf.isBehaviour || inf.isModelRepo || inf.isCollection) {
          name = inf.fileNameWithoutExt;
          answer.js = answer.js.replace("return " + name + ";\n", "" + name + ".__name = '" + name + "';\n\n   return " + name + ";\n");
        }
        if (_this.postCompilerCallback != null) {
          answer.js = _this.postCompilerCallback(answer.js);
        }
        if (_this.params.generateSourceMap) {
          answer.js = "" + answer.js + "\n//# sourceMappingURL=./" + basename + ".js.map";
        }
        return answer;
      };
    })(this)).zip(Future.call(mkdirp, path.dirname(dstBasename))).flatMap((function(_this) {
      return function(answer) {
        return Future.sequence([Future.call(fs.writeFile, "" + dstBasename + ".js", answer.js), void 0 !== answer.v3SourceMap ? Future.call(fs.writeFile, "" + dstBasename + ".js.map", answer.v3SourceMap) : Future.resolved(), void 0 !== answer.v3SourceMap ? Future.call(fs.writeFile, "" + dstBasename + ".coffee", answer.coffeeString) : Future.resolved()]);
      };
    })(this)).flatMapFail(function(err) {
      if (err instanceof SyntaxError && (err.location != null)) {
        console.error(("CoffeeScript syntax error: " + err.message + "\n") + ("" + src + ":" + err.location.first_line + ":" + err.location.first_column + "\n"));
        return Future.rejected(new BuildTask.ExpectedError(err));
      } else {
        return Future.rejected(err);
      }
    }).link(this.readyPromise);
  };

  return CompileCoffeeScript;

})(BuildTask);

module.exports = CompileCoffeeScript;
