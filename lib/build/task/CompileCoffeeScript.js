// Generated by CoffeeScript 1.7.1
var BuildTask, CompileCoffeeScript, Future, coffee, fs, mkdirp, path,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

fs = require('fs');

path = require('path');

coffee = require('coffee-script');

mkdirp = require('mkdirp');

Future = require('../../utils/Future');

BuildTask = require('./BuildTask');

CompileCoffeeScript = (function(_super) {
  __extends(CompileCoffeeScript, _super);

  function CompileCoffeeScript() {
    return CompileCoffeeScript.__super__.constructor.apply(this, arguments);
  }

  CompileCoffeeScript.prototype.preCompilerCallback = null;

  CompileCoffeeScript.prototype.postCompilerCallback = null;

  CompileCoffeeScript.prototype.run = function() {
    var basename, dirname, dst, dstName, src;
    dirname = path.dirname(this.params.file);
    basename = path.basename(this.params.file, '.coffee');
    dstName = this.params.info.isAppConfig ? 'application' : basename;
    src = "" + this.params.baseDir + "/" + this.params.file;
    dst = "" + this.params.targetDir + "/" + dirname + "/" + dstName + ".js";
    return Future.call(fs.readFile, src, 'utf8').map((function(_this) {
      return function(coffeeString) {
        var inf, js, name;
        if (_this.preCompilerCallback) {
          coffeeString = _this.preCompilerCallback(coffeeString);
        }
        js = coffee.compile(coffeeString, {
          compile: true,
          bare: true
        });
        inf = _this.params.info;
        if (inf.isWidget || inf.isBehaviour || inf.isModelRepo || inf.isCollection) {
          name = inf.fileNameWithoutExt;
          js = js.replace("return " + name + ";\n", "" + name + ".__name = '" + name + "';\n\n   return " + name + ";\n");
        }
        if (_this.postCompilerCallback != null) {
          js = _this.postCompilerCallback(js);
        }
        return js;
      };
    })(this)).zip(Future.call(mkdirp, path.dirname(dst))).flatMap((function(_this) {
      return function(jsString) {
        return Future.call(fs.writeFile, dst, jsString);
      };
    })(this)).flatMapFail(function(err) {
      if (err instanceof SyntaxError && (err.location != null)) {
        console.error(("CoffeeScript syntax error: " + err.message + "\n") + ("" + src + ":" + err.location.first_line + ":" + err.location.first_column + "\n"));
        return Future.rejected(new BuildTask.ExpectedError(err));
      } else {
        return Future.rejected(err);
      }
    }).link(this.readyPromise);
  };

  return CompileCoffeeScript;

})(BuildTask);

module.exports = CompileCoffeeScript;
