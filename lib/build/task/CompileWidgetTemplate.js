// Generated by CoffeeScript 1.9.1
(function() {
  var BuildTask, CompileWidgetTemplate, Future, path, requirejsConfig,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  path = require('path');

  Future = require('../../utils/Future');

  BuildTask = require('./BuildTask');

  requirejsConfig = require('./requirejs-config');

  CompileWidgetTemplate = (function(superClass) {
    extend(CompileWidgetTemplate, superClass);

    function CompileWidgetTemplate() {
      return CompileWidgetTemplate.__super__.constructor.apply(this, arguments);
    }

    CompileWidgetTemplate.prototype.run = function() {
      var src;
      src = this.params.baseDir + "/" + this.params.file;
      return requirejsConfig(this.params.targetDir).flatMap(function() {
        return Future.require('cord!compile/WidgetCompiler');
      }).flatMap((function(_this) {
        return function(WidgetCompiler) {
          return WidgetCompiler.compileWidgetTemplate(_this._getWidgetCanonicalName(), src);
        };
      })(this)).failAloud().link(this.readyPromise);
    };

    CompileWidgetTemplate.prototype._getWidgetCanonicalName = function() {

      /*
      Builds and returns canonical name of the widget of the template file from the task params
      @return String
       */
      var className, name, parts;
      name = this.params.info.fileNameWithoutExt;
      className = name.charAt(0).toUpperCase() + name.slice(1);
      parts = this.params.file.split(path.sep).slice(2, -2);
      parts.push(className);
      return '/' + parts.join('/').replace('/widgets/', '//');
    };

    return CompileWidgetTemplate;

  })(BuildTask);

  module.exports = CompileWidgetTemplate;

}).call(this);
