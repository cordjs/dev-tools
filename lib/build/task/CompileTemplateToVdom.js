// Generated by CoffeeScript 1.8.0
var BuildTask, CompileTemplateToVdom, Future, dustVdom, fs, mkdirp, path,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

fs = require('fs');

path = require('path');

mkdirp = require('mkdirp');

Future = require('../../utils/Future');

BuildTask = require('./BuildTask');

dustVdom = require('./dust-vdom');

CompileTemplateToVdom = (function(_super) {
  __extends(CompileTemplateToVdom, _super);

  function CompileTemplateToVdom() {
    return CompileTemplateToVdom.__super__.constructor.apply(this, arguments);
  }

  CompileTemplateToVdom.prototype.run = function() {
    var basename, dirname, dst, src;
    dirname = path.dirname(this.params.file);
    basename = path.basename(this.params.file, '.html');
    src = "" + this.params.baseDir + "/" + this.params.file;
    dst = "" + this.params.targetDir + "/" + dirname + "/" + basename + ".js";
    return Future.call(fs.readFile, src, 'utf8').then((function(_this) {
      return function(dustString) {
        var parsed, vdomString;
        parsed = dustVdom.parse(dustString);
        vdomString = JSON.stringify(parsed, null, 2);
        console.log("----------------VDOM-------------------------");
        console.log(vdomString);
        console.log("---------------------------------------------");
        return vdomString;
      };
    })(this)).zip(Future.call(mkdirp, path.dirname(dst))).then((function(_this) {
      return function(vdomString) {
        return Future.call(fs.writeFile, dst, vdomString);
      };
    })(this)).link(this.readyPromise).failAloud();
  };

  return CompileTemplateToVdom;

})(BuildTask);

module.exports = CompileTemplateToVdom;
