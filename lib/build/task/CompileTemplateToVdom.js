// Generated by CoffeeScript 1.8.0
var BuildTask, CompileTemplateToVdom, Future, astToHyperscript, dustVdom, fs, mkdirp, path,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

fs = require('fs');

path = require('path');

mkdirp = require('mkdirp');

Future = require('../../utils/Future');

BuildTask = require('./BuildTask');

dustVdom = require('./dust-vdom');

CompileTemplateToVdom = (function(_super) {
  __extends(CompileTemplateToVdom, _super);

  function CompileTemplateToVdom() {
    return CompileTemplateToVdom.__super__.constructor.apply(this, arguments);
  }

  CompileTemplateToVdom.prototype.run = function() {
    var basename, dirname, dst, src;
    dirname = path.dirname(this.params.file);
    basename = path.basename(this.params.file, '.html');
    src = "" + this.params.baseDir + "/" + this.params.file;
    dst = "" + this.params.targetDir + "/" + dirname + "/" + basename + ".js";
    return Future.call(fs.readFile, src, 'utf8').then((function(_this) {
      return function(dustString) {
        var ast, hyperscript;
        ast = dustVdom.parse(dustString);
        hyperscript = astToHyperscript(ast);
        console.log("----------------VDOM-------------------------");
        console.log(JSON.stringify(ast, null, 2));
        console.log("---------------------------------------------");
        console.log(hyperscript);
        console.log("---------------------------------------------");
        return "define(['cord!vdom/vhyperscript/h'],function(h){ return function(){ return " + hyperscript + ";};});";
      };
    })(this)).zip(Future.call(mkdirp, path.dirname(dst))).then((function(_this) {
      return function(vdomJs) {
        return Future.call(fs.writeFile, dst, vdomJs);
      };
    })(this)).link(this.readyPromise).failAloud();
  };

  return CompileTemplateToVdom;

})(BuildTask);

astToHyperscript = function(ast, indent) {
  var chunks, contentsStr, indentPrefix, node, prevIndentPrefix, result;
  if (indent == null) {
    indent = 1;
  }
  indentPrefix = (new Array(indent * 2 + 1)).join(' ');
  prevIndentPrefix = (new Array((indent - 1) * 2 + 1)).join(' ');
  chunks = (function() {
    var _i, _len, _results;
    _results = [];
    for (_i = 0, _len = ast.length; _i < _len; _i++) {
      node = ast[_i];
      switch (node.type) {
        case 'html_tag':
          contentsStr = '';
          if (node.contents) {
            contentsStr = astToHyperscript(node.contents, indent + 1);
          }
          if (contentsStr) {
            contentsStr = ', ' + contentsStr;
          }
          _results.push("\n" + indentPrefix + "h('" + node.name + "'" + contentsStr + ")");
          break;
        case 'text':
          _results.push("\n" + indentPrefix + "'" + node.text + "'");
          break;
        default:
          _results.push(void 0);
      }
    }
    return _results;
  })();
  result = '';
  if (ast.length) {
    result = '[' + chunks.join(',') + "\n" + prevIndentPrefix + ']';
  }
  return result;
};

module.exports = CompileTemplateToVdom;
