// Generated by CoffeeScript 1.7.1
var fileInfo, should;

should = require('should');

fileInfo = require('../FileInfo');

describe('FileInfo', function() {
  fileInfo.setDirs('/User/user/project', '/User/user/project/target');
  fileInfo.setBundles(['cord/example', 'example/ns/bundle', 'ns2/ns3/b1', 'test/bundle', 'test/bundle2']);
  it('should setup base and target dirs correctly', function() {
    should.equal(fileInfo.baseDir, '/User/user/project');
    return fileInfo.targetDir.should.equal('/User/user/project/target');
  });
  describe('setBundles()', function() {
    return it('should form correct bundle tree', function() {
      should.exists(fileInfo.bundleTree.cord.example);
      should.not.exists(fileInfo.bundleTree.ns3);
      fileInfo.bundleTree.cord.example.should.equal(true);
      fileInfo.bundleTree.ns2.should.have.property('ns3');
      fileInfo.bundleTree.ns2.ns3.should.be.a('object');
      return fileInfo.bundleTree.ns2.ns3.should.have.property('b1')["with"].a('boolean');
    });
  });
  describe('getFileInfo', function() {
    return it('should correctly detect widget templates', function() {
      var info;
      info = fileInfo.getFileInfo('public/bundles/test/bundle/widgets/testWidget/testWidget.html', 'test/bundle');
      return info.isWidgetTemplate.should.be["true"];
    });
  });
  describe('detectBundle()', function() {
    it('should return bundle part of correct path', function() {
      return fileInfo.detectBundle('public/bundles/test/bundle/widgets/testWidget/testWidget.html').should.equal('test/bundle');
    });
    it('should return empty string for incorrect path', function() {
      return fileInfo.detectBundle('public/test/bundle/widgets/testWidget/testWidget.html').should.equal('');
    });
    return it('should correctly detect several bundles under common namespace', function() {
      fileInfo.detectBundle('public/bundles/test/bundle/widgets/testWidget/testWidget.html').should.equal('test/bundle');
      return fileInfo.detectBundle('public/bundles/test/bundle2/widgets/testWidget/testWidget.html').should.equal('test/bundle2');
    });
  });
  return describe('getTargetForSource() should work correctly for', function() {
    it('widget class', function() {
      return should.equal(fileInfo.getTargetForSource('/User/user/project/public/bundles/test/bundle/widgets/testWidget/TestWidget.coffee'), '/User/user/project/target/public/bundles/test/bundle/widgets/testWidget/TestWidget.js');
    });
    return it('widget template', function() {
      return should.equal(fileInfo.getTargetForSource('/User/user/project/public/bundles/test/bundle/widgets/testWidget/testWidget.html'), '/User/user/project/target/public/bundles/test/bundle/widgets/testWidget/testWidget.html.js');
    });
  });
});
