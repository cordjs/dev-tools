// Generated by CoffeeScript 1.9.1
var BuildSession, EventEmitter, Future, ProjectBuilder, ProjectWatcher, _, appConfig, buildManager, fileInfo, fs, fswalker, path, requirejs, requirejsConfig, rmrf, sourceModified, walkerFilter,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

path = require('path');

fs = require('fs');

EventEmitter = require('events').EventEmitter;

_ = require('underscore');

requirejs = require(process.cwd() + '/node_modules/requirejs');

Future = require('../utils/Future');

rmrf = require('../utils/rmrf');

fswalker = require('../utils/fswalker');

appConfig = require('../appConfig');

requirejsConfig = require('./task/requirejs-config');

buildManager = require('./BuildManager');

BuildSession = require('./BuildSession');

fileInfo = require('./FileInfo');

ProjectWatcher = require('./ProjectWatcher');

walkerFilter = function(dir, name) {

  /*
  Filters hidden and temporary files from being handled by the builder.
  @param String dir dirname
  @param String name basename
  @return Boolean true if the file is OK for building, false if it should be skipped
   */
  var ext, res;
  res = name.charAt(0) === '.' ? false : (ext = path.extname(name), ext === '.orig' || ext.substr(-1) === '~' ? false : dir.indexOf(path.sep + '.') === -1);
  return res;
};

ProjectBuilder = (function(superClass) {
  extend(ProjectBuilder, superClass);


  /*
  Builds the whole cordjs application project
   */

  ProjectBuilder.prototype._emitCompletePromise = null;

  function ProjectBuilder(params) {
    this.params = params;
    fileInfo.setDirs(this.params.baseDir, this.params.targetDir);
    buildManager.generateSourceMap = this.params.map;
    if (this.params.watch) {
      this.setupWatcher();
    }
  }

  ProjectBuilder.prototype.build = function() {
    var appConfFile, appConfPromise, completePromise, corePromise, fullCompletePromise, nonWidgetFilesPromise, pathUtilsPromise, relativePos, scanBundle, scanCore, scanDir, scanRegularDir, start, widgetClassesPromise;
    console.log("Building project (full scan)...");
    start = process.hrtime();
    completePromise = new Future(1);
    corePromise = new Future(1);
    widgetClassesPromise = new Future(1);
    nonWidgetFilesPromise = new Future(1);
    relativePos = this.params.baseDir.length + 1;
    scanDir = (function(_this) {
      return function(dir, payloadCallback) {
        var walker;
        completePromise.done(function() {
          return _this.watchDir(dir);
        });
        completePromise.fork();
        walker = fswalker(dir, {
          filter: walkerFilter
        });
        walker.on('file', function(root, stat, next) {
          var relativeDir;
          relativeDir = root.substr(relativePos);
          payloadCallback(relativeDir + "/" + stat.name, stat);
          return setTimeout(next, 0);
        });
        walker.on('symbolicLink', function(root, stat, next) {
          var relativeDir;
          relativeDir = root.substr(relativePos);
          payloadCallback(relativeDir + "/" + stat.name, stat);
          return next();
        });
        if (_this.params.watch) {
          walker.on('directory', function(root, stat, next) {
            completePromise.done(function() {
              return _this.watchDir(root + "/" + stat.name);
            });
            return next();
          });
        }
        walker.on('end', function() {
          if (false) {
            console.log("walker for dir " + dir + " completed!");
          }
          return completePromise.resolve();
        });
        return walker;
      };
    })(this);
    scanRegularDir = (function(_this) {
      return function(dir) {
        return scanDir(dir, function(relativeName, stat) {
          var info;
          info = fileInfo.getFileInfo(relativeName);
          completePromise.fork();
          return sourceModified(relativeName, stat, _this.params.targetDir, info).map(function(modified) {
            if (modified) {
              completePromise.when(buildManager.createTask(relativeName, _this.params.baseDir, _this.params.targetDir, info));
            }
            return completePromise.resolve();
          });
        });
      };
    })(this);
    scanCore = (function(_this) {
      return function() {
        return scanDir(_this.params.baseDir + "/public/bundles/cord/core", function(relativeName, stat) {
          var info;
          info = fileInfo.getFileInfo(relativeName, 'cord/core');
          completePromise.fork();
          return sourceModified(relativeName, stat, _this.params.targetDir, info).map(function(modified) {
            var task;
            if (modified) {
              if (info.inWidgets) {
                if (info.isWidget) {
                  task = corePromise.flatMap(function() {
                    return buildManager.createTask(relativeName, _this.params.baseDir, _this.params.targetDir, info);
                  });
                  completePromise.when(task);
                  widgetClassesPromise.when(task);
                } else if (info.isWidgetTemplate) {
                  widgetClassesPromise.flatMap(function() {
                    return buildManager.createTask(relativeName, _this.params.baseDir, _this.params.targetDir, info);
                  }).link(completePromise);
                } else if (info.isStylus) {
                  pathUtilsPromise.flatMap(function() {
                    return buildManager.createTask(relativeName, _this.params.baseDir, _this.params.targetDir, info);
                  }).link(completePromise);
                } else {
                  buildManager.createTask(relativeName, _this.params.baseDir, _this.params.targetDir, info).link(completePromise);
                }
              } else if (!(info.fileName === 'pathUtils.coffee' && info.lastDirName === 'requirejs')) {
                task = buildManager.createTask(relativeName, _this.params.baseDir, _this.params.targetDir, info);
                corePromise.when(task);
                completePromise.when(task);
              }
            }
            return completePromise.resolve();
          }).link(corePromise);
        }).on('end', function() {
          return corePromise.resolve();
        });
      };
    })(this);
    scanBundle = (function(_this) {
      return function(bundle) {
        widgetClassesPromise.fork();
        nonWidgetFilesPromise.fork();
        return scanDir(_this.params.baseDir + "/public/bundles/" + bundle, function(relativeName, stat) {
          var info;
          info = fileInfo.getFileInfo(relativeName, bundle);
          completePromise.fork();
          return sourceModified(relativeName, stat, _this.params.targetDir, info).map(function(modified) {
            var task;
            if (modified) {
              if (info.isWidget) {
                task = corePromise.flatMap(function() {
                  return buildManager.createTask(relativeName, _this.params.baseDir, _this.params.targetDir, info);
                });
                completePromise.when(task);
                widgetClassesPromise.when(task);
              } else if (info.isWidgetTemplate) {
                widgetClassesPromise.zip(nonWidgetFilesPromise).flatMap(function() {
                  return buildManager.createTask(relativeName, _this.params.baseDir, _this.params.targetDir, info);
                }).link(completePromise);
              } else if (info.isCoffee && !info.inWidgets) {
                buildManager.createTask(relativeName, _this.params.baseDir, _this.params.targetDir, info).link(completePromise).link(nonWidgetFilesPromise);
              } else if (info.isStylus) {
                pathUtilsPromise.flatMap(function() {
                  return buildManager.createTask(relativeName, _this.params.baseDir, _this.params.targetDir, info);
                }).link(completePromise);
              } else {
                buildManager.createTask(relativeName, _this.params.baseDir, _this.params.targetDir, info).link(completePromise);
              }
            }
            return completePromise.resolve();
          });
        }).on('end', function() {
          widgetClassesPromise.resolve();
          return nonWidgetFilesPromise.resolve();
        });
      };
    })(this);
    appConfFile = "public/app/" + this.params.appConfigName;
    appConfPromise = buildManager.createTask(appConfFile + ".coffee", this.params.baseDir, this.params.targetDir, fileInfo.getFileInfo(appConfFile + ".coffee"));
    pathUtilsPromise = buildManager.createTask('public/bundles/cord/core/requirejs/pathUtils.coffee', this.params.baseDir, this.params.targetDir, fileInfo.getFileInfo('public/bundles/cord/core/requirejs/pathUtils.coffee', 'cord/core'));
    scanRegularDir(this.params.baseDir + '/public/vendor');
    scanRegularDir(this.params.baseDir + '/conf');
    scanRegularDir(this.params.baseDir + '/test');
    buildManager.createTask('server.coffee', this.params.baseDir, this.params.targetDir, fileInfo.getFileInfo('server.coffee')).link(completePromise);
    buildManager.createTask('optimizer-predefined-groups.coffee', this.params.baseDir, this.params.targetDir, fileInfo.getFileInfo('optimizer-predefined-groups.coffee'))["catch"](function() {}).link(completePromise);
    appConfPromise.then((function(_this) {
      return function() {
        scanCore();
        requirejs.config({
          baseUrl: _this.params.targetDir
        });
        return appConfig.getBundles(_this.params.targetDir);
      };
    })(this)).then(function(bundles) {
      var bundle, i, len;
      bundles = bundles.filter(function(n) {
        return n !== 'cord/core';
      });
      fileInfo.setBundles(bundles);
      for (i = 0, len = bundles.length; i < len; i++) {
        bundle = bundles[i];
        scanBundle(bundle);
      }
      widgetClassesPromise.resolve();
      nonWidgetFilesPromise.resolve();
      completePromise.resolve();
    }).failAloud();
    fullCompletePromise = this.params.indexPageWidget ? corePromise.then((function(_this) {
      return function() {
        return requirejsConfig(_this.params.targetDir);
      };
    })(this)).then(function() {
      return Future.require('cord!requirejs/cord-w').zip(completePromise);
    }).then((function(_this) {
      return function(cord) {
        var info;
        info = {
          isIndexPage: true,
          configName: _this.params.config
        };
        return buildManager.createTask(_this.params.indexPageWidget, _this.params.baseDir, _this.params.targetDir, info);
      };
    })(this)) : completePromise;
    this._previousSessionPromise = fullCompletePromise["catch"](function() {
      return true;
    });
    return fullCompletePromise.then(function() {
      return 'completed';
    })["catch"](function() {
      return 'failed';
    }).then((function(_this) {
      return function(verb) {
        var diff;
        diff = process.hrtime(start);
        console.log("Build " + verb + " in " + (parseFloat((diff[0] * 1e9 + diff[1]) / 1e9).toFixed(3)) + " s");
        if (verb === 'completed') {
          buildManager.stop();
          return _this.emit('complete');
        }
      };
    })(this));
  };

  ProjectBuilder.prototype.setupWatcher = function() {
    this.watcher = new ProjectWatcher(this.params.baseDir);
    return this.watcher.on('change', (function(_this) {
      return function(changes) {
        var currentSessionPromise;
        if (_this._emitCompletePromise == null) {
          console.log('=====================');
          _this._emitCompletePromise = new Future;
          _this._emitCompletePromise.fork();
          _this._emitCompletePromise.done(function() {
            _this.emit('complete');
            return _this._emitCompletePromise = null;
          });
        } else {
          _this._emitCompletePromise.fork();
        }
        currentSessionPromise = _this._previousSessionPromise.flatMap(function() {
          var removed, rmList;
          rmList = (function() {
            var i, len, ref, results;
            ref = _.sortBy(changes.removed, function(f) {
              return f.length;
            }).reverse();
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
              removed = ref[i];
              console.log("removing " + removed + "...");
              results.push(rmrf(fileInfo.getTargetForSource(removed)).failAloud());
            }
            return results;
          })();
          return Future.sequence(rmList).flatMap(function() {
            var buildSession, file, ref, scanCompletePromise, scanDir, sessionCompletePromise, stat;
            buildSession = new BuildSession(_this.params);
            sessionCompletePromise = Future.single();
            scanDir = function(dir) {
              var result, walker;
              result = Future.single();
              sessionCompletePromise.done(function() {
                return _this.watchDir(dir);
              });
              walker = fswalker(dir, {
                filter: walkerFilter
              });
              walker.on('file', function(root, stat, next) {
                buildSession.add(path.join(root, stat.name));
                return next();
              });
              walker.on('symbolicLink', function(root, stat, next) {
                buildSession.add(path.join(root, stat.name));
                return next();
              });
              walker.on('directory', function(root, stat, next) {
                sessionCompletePromise.done(function() {
                  return _this.watchDir(root + "/" + stat.name);
                });
                return next();
              });
              walker.on('end', function() {
                if (false) {
                  console.log("walker for dir " + dir + " completed!");
                }
                return result.resolve();
              });
              return result;
            };
            scanCompletePromise = new Future;
            ref = changes.changed;
            for (file in ref) {
              stat = ref[file];
              if (stat.isFile()) {
                buildSession.add(file);
              } else if (stat.isDirectory()) {
                scanCompletePromise.when(scanDir(file));
              }
            }
            return scanCompletePromise.flatMap(function() {
              return sessionCompletePromise.when(buildSession.complete());
            }).done(function() {
              return _this._emitCompletePromise.resolve();
            });
          });
        });
        return _this._previousSessionPromise = currentSessionPromise;
      };
    })(this));
  };

  ProjectBuilder.prototype.watchDir = function(dir) {
    if (this.params.watch) {
      return this.watcher.addDir(dir);
    }
  };

  return ProjectBuilder;

})(EventEmitter);

sourceModified = function(file, srcStat, targetDir, info) {

  /*
  Asynchronously returns true if destination built file modification time is earlier than the source
   (file need to be recompiled)
  @param String file relative file name
  @param StatInfo srcStat result of stat-call for the source file
  @param String targetDir base directory for destination file
  @param Object info framework-related information about the file
  @return Future[Boolean]
   */
  var dstPath;
  dstPath = path.join(targetDir, fileInfo.getBuildDestinationFile(file, info));
  return Future.call(fs.stat, dstPath).map(function(dstStat) {
    return srcStat.mtime.getTime() > dstStat.mtime.getTime();
  }).mapFail(function() {
    return true;
  });
};

module.exports = ProjectBuilder;
